<!-- Sample Ant build file for running IglooScore under JaCoCo -->
<!-- Jonathan Cook, 17 Sep 2015 -->
<project name="racingscore" default="report" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- directory configuration - if things are not working, start troubleshooting from here -->
	<property name="jacoco.dir" location="lib/" />
	<property name="src.dir" location="src/" />
	<property name="build.dir" location="bin/" />
	<property name="result.dir" location="./target" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.dir}/jacocoant.jar" />
	</taskdef>

	<!-- standard compile task, but turn debugging on for source viewing -->
	<target name="compile" description="compile the source">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" debug="true" />
	</target>

	<!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
        newer than the class files or this build file -->
	<target name="checkRun">
		<uptodate property="run.notneeded" targetfile="${result.exec.file}">
			<srcfiles dir="${src.dir}" includes="**/*.java build.xml" />
		</uptodate>
	</target>

	<!-- official test example, merged with our code -->
	<target name="test" depends="compile,checkRun" unless="run.notneeded">
		<echo>run needed...</echo>
		<!--
	 Step 2: Wrap test execution with the JaCoCo coverage task 
	 this example has two runs, you'll need to perhaps
        modify them, and then add more; this only runs if needed
	-->
		
		<!-- Testing with original scores -->
		<echo message="TEST RacingScore1: 8 9 6" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="9" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		<!-- Testing with only 2 scores -->
		<echo message="TEST RacingScore1: 8 9" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="9" />
			</java>
		</jacoco:coverage>
		<!-- Testing with all 0's -->
		<echo message="TEST RacingScore1: 0 0 0" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="0" />
				<arg value="0" />
				<arg value="0" />
			</java>
		</jacoco:coverage>
		<!-- negative scores -->
		<echo message="TEST RacingScore1: -8 -9 -6" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="-8" />
				<arg value="-9" />
				<arg value="-6" />
			</java>
		</jacoco:coverage>
		<!-- All the same -->
		<echo message="TEST RacingScore1: 7 7 7" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="7" />
				<arg value="7" />
				<arg value="7" />
			</java>
		</jacoco:coverage>
		<!-- Not integers -->
		<echo message="TEST RacingScore1: five four three" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
				<classpath path="${build.dir}" />
				<arg value="five" />
				<arg value="four" />
				<arg value="three" />
			</java>
		</jacoco:coverage>
		<!-- Coverage on 1 achieved, testing on 2 now only -->
		<!-- score1 > score2 > score3 -->
		<echo message="TEST RacingScore2: 5 2 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="5" />
				<arg value="2" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		<!-- Testing with original scores -->
		<echo message="TEST RacingScore2: 8 9 6" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="9" />
				<arg value="6" />
			</java>
		</jacoco:coverage>
		<!-- All 0's -->
		<echo message="TEST RacingScore2: 0 0 0" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="0" />
				<arg value="0" />
				<arg value="0" />
			</java>
		</jacoco:coverage>
		<!-- score1 > score2 > score3  -->
		<echo message="TEST RacingScore2: 8 5 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="5" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		
		<!-- score2 > score1 > score3  -->
		<echo message="TEST RacingScore2: 5 8 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="5" />
				<arg value="8" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		
		<!-- score2 > score3 > score1  -->
		<echo message="TEST RacingScore2: 8 10 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="10" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		<!-- score3 > score2 > score1  -->
		<echo message="TEST RacingScore2: 1 5 8" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="5" />
				<arg value="8" />
			</java>
		</jacoco:coverage>
		<!-- score1 = score2 > score3  -->
		<echo message="TEST RacingScore2: 8 8 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="8" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		<!-- score1 > score2 = score3  -->
		<echo message="TEST RacingScore2: 8 1 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="1" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		<!-- score1 < score2 = score3  -->
		<echo message="TEST RacingScore2: 1 5 5" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="5" />
				<arg value="5" />
			</java>
		</jacoco:coverage>
		
		<!-- score1 = score2 < score3  -->
		<echo message="TEST RacingScore2: 5 5 10" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="5" />
				<arg value="5" />
				<arg value="10" />
			</java>
		</jacoco:coverage>
		<!-- score1 > score2 > score3  -->
		<echo message="TEST RacingScore2: 8 5 1" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="5" />
				<arg value="1" />
			</java>
		</jacoco:coverage>
		<!-- score1 = score2 = score3  -->
		<echo message="TEST RacingScore2: 7 7 7" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="7" />
				<arg value="7" />
				<arg value="7" />
			</java>
		</jacoco:coverage>
		<!-- 2 arguements  -->
		<echo message="TEST RacingScore2: 8 5" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="8" />
				<arg value="5" />
			</java>
		</jacoco:coverage>
		<!-- Non-integers  -->
		<echo message="TEST RacingScore2: one two three" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="one" />
				<arg value="two" />
				<arg value="three" />
			</java>
		</jacoco:coverage>
		<!-- Negative numbers  -->
		<echo message="TEST RacingScore2: -1 2 3" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="-1" />
				<arg value="2" />
				<arg value="3" />
			</java>
		</jacoco:coverage>
		<!-- Negative numbers  -->
		<echo message="TEST RacingScore2: 1 -2 3" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="-2" />
				<arg value="3" />
			</java>
		</jacoco:coverage>
		<!-- Negative numbers  -->
		<echo message="TEST RacingScore2: 1 2 -3" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="2" />
				<arg value="-3" />
			</java>
		</jacoco:coverage>
		<!-- Above 50  -->
		<echo message="TEST RacingScore2: 51 2 3" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="51" />
				<arg value="2" />
				<arg value="3" />
			</java>
		</jacoco:coverage>
		<!-- Above 50  -->
		<echo message="TEST RacingScore2: 1 52 3" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="52" />
				<arg value="3" />
			</java>
		</jacoco:coverage>
		<!-- Above 50  -->
		<echo message="TEST RacingScore2: 1 2 53" />
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
				<arg value="1" />
				<arg value="2" />
				<arg value="53" />
			</java>
		</jacoco:coverage>
	</target>

	<target name="report" depends="test,checkReport" unless="report.notneeded">
		<echo>report needed...</echo>
		<!--  Step 3: Create coverage report  -->
		<jacoco:report>
			<!--
	 This task needs the collected execution data and ... 
	-->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>
			<!--  the class files and optional source files ...  -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${build.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>
			<!--  to produce reports in different formats.  -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>

	<!-- tests if new jacoco report needs generated by checking if top report file
        (index.html) is newer than the run data file (jacoco.exec) -->
	<target name="checkReport">
		<uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
	</target>

	<!-- clean up by removing all generated files; do "ant clean" to start afresh -->
	<target name="clean">
		<delete>
			<fileset dir="." includes="**/*.class **/jacoco.exec" />
		</delete>
		<delete dir="${result.report.dir}" />
	</target>

</project>

